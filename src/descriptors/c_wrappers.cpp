// AUTO-GENERATED FILE - DO NOT EDIT DIRECTLY
// Generated by scripts/update_registry.py

#include "../common.hpp"
#include "../cregistry.h"
#include <string>

// C linkage for our helper function
extern "C" {
// Helper function that maintains string lifetime
static thread_local std::string tls_smiles_buffer;
const char* getSmilesCFunc(const void* ctx) {
    auto cpp_ctx = reinterpret_cast<const desfact::Context*>(ctx);
    tls_smiles_buffer = cpp_ctx->getSmiles();
    return tls_smiles_buffer.c_str();
}
}

namespace desfact {

// --- SmilesAdjacentHeteroatomRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesAdjacentHeteroatomRatio, C_Descriptor, "C implementation of SmilesAdjacentHeteroatomRatio")
DESCRIPTOR_DEPENDENCIES(SmilesAdjacentHeteroatomRatio) { return {}; }
DescriptorResult SmilesAdjacentHeteroatomRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAdjacentHeteroatomRatio(c_ctx, get_smiles_func);
}

// --- SmilesAlcoholCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAlcoholCount, C_Descriptor, "C implementation of SmilesAlcoholCount")
DESCRIPTOR_DEPENDENCIES(SmilesAlcoholCount) { return {}; }
DescriptorResult SmilesAlcoholCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAlcoholCount(c_ctx, get_smiles_func);
}

// --- SmilesAldehydeCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAldehydeCount, C_Descriptor, "C implementation of SmilesAldehydeCount")
DESCRIPTOR_DEPENDENCIES(SmilesAldehydeCount) { return {}; }
DescriptorResult SmilesAldehydeCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAldehydeCount(c_ctx, get_smiles_func);
}

// --- SmilesAliphaticChainCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAliphaticChainCount, C_Descriptor, "C implementation of SmilesAliphaticChainCount")
DESCRIPTOR_DEPENDENCIES(SmilesAliphaticChainCount) { return {}; }
DescriptorResult SmilesAliphaticChainCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAliphaticChainCount(c_ctx, get_smiles_func);
}

// --- SmilesAlkyneCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAlkyneCount, C_Descriptor, "C implementation of SmilesAlkyneCount")
DESCRIPTOR_DEPENDENCIES(SmilesAlkyneCount) { return {}; }
DescriptorResult SmilesAlkyneCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAlkyneCount(c_ctx, get_smiles_func);
}

// --- SmilesAlternatingElementPattern Wrapper ---
DECLARE_DESCRIPTOR(SmilesAlternatingElementPattern, C_Descriptor, "C implementation of SmilesAlternatingElementPattern")
DESCRIPTOR_DEPENDENCIES(SmilesAlternatingElementPattern) { return {}; }
DescriptorResult SmilesAlternatingElementPatternDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAlternatingElementPattern(c_ctx, get_smiles_func);
}

// --- SmilesAmideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAmideCount, C_Descriptor, "C implementation of SmilesAmideCount")
DESCRIPTOR_DEPENDENCIES(SmilesAmideCount) { return {}; }
DescriptorResult SmilesAmideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAmideCount(c_ctx, get_smiles_func);
}

// --- SmilesAmideToNitrogenRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesAmideToNitrogenRatio, C_Descriptor, "C implementation of SmilesAmideToNitrogenRatio")
DESCRIPTOR_DEPENDENCIES(SmilesAmideToNitrogenRatio) { return {}; }
DescriptorResult SmilesAmideToNitrogenRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAmideToNitrogenRatio(c_ctx, get_smiles_func);
}

// --- SmilesAnhydrideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAnhydrideCount, C_Descriptor, "C implementation of SmilesAnhydrideCount")
DESCRIPTOR_DEPENDENCIES(SmilesAnhydrideCount) { return {}; }
DescriptorResult SmilesAnhydrideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAnhydrideCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticBondCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticBondCount, C_Descriptor, "C implementation of SmilesAromaticBondCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticBondCount) { return {}; }
DescriptorResult SmilesAromaticBondCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticBondCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticCarbonCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticCarbonCount, C_Descriptor, "C implementation of SmilesAromaticCarbonCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticCarbonCount) { return {}; }
DescriptorResult SmilesAromaticCarbonCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticCarbonCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticCarbonHeteroatomCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticCarbonHeteroatomCount, C_Descriptor, "C implementation of SmilesAromaticCarbonHeteroatomCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticCarbonHeteroatomCount) { return {}; }
DescriptorResult SmilesAromaticCarbonHeteroatomCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticCarbonHeteroatomCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticHalogenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticHalogenCount, C_Descriptor, "C implementation of SmilesAromaticHalogenCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticHalogenCount) { return {}; }
DescriptorResult SmilesAromaticHalogenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticHalogenCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticNitrogenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticNitrogenCount, C_Descriptor, "C implementation of SmilesAromaticNitrogenCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticNitrogenCount) { return {}; }
DescriptorResult SmilesAromaticNitrogenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticNitrogenCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticOxygenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticOxygenCount, C_Descriptor, "C implementation of SmilesAromaticOxygenCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticOxygenCount) { return {}; }
DescriptorResult SmilesAromaticOxygenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticOxygenCount(c_ctx, get_smiles_func);
}

// --- SmilesAromaticRingEdge Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticRingEdge, C_Descriptor, "C implementation of SmilesAromaticRingEdge")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticRingEdge) { return {}; }
DescriptorResult SmilesAromaticRingEdgeDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticRingEdge(c_ctx, get_smiles_func);
}

// --- SmilesAromaticSulfurCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAromaticSulfurCount, C_Descriptor, "C implementation of SmilesAromaticSulfurCount")
DESCRIPTOR_DEPENDENCIES(SmilesAromaticSulfurCount) { return {}; }
DescriptorResult SmilesAromaticSulfurCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAromaticSulfurCount(c_ctx, get_smiles_func);
}

// --- SmilesAtomicEntropy Wrapper ---
DECLARE_DESCRIPTOR(SmilesAtomicEntropy, C_Descriptor, "C implementation of SmilesAtomicEntropy")
DESCRIPTOR_DEPENDENCIES(SmilesAtomicEntropy) { return {}; }
DescriptorResult SmilesAtomicEntropyDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAtomicEntropy(c_ctx, get_smiles_func);
}

// --- SmilesAzideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesAzideCount, C_Descriptor, "C implementation of SmilesAzideCount")
DESCRIPTOR_DEPENDENCIES(SmilesAzideCount) { return {}; }
DescriptorResult SmilesAzideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesAzideCount(c_ctx, get_smiles_func);
}

// --- SmilesBenzimidazoleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBenzimidazoleCount, C_Descriptor, "C implementation of SmilesBenzimidazoleCount")
DESCRIPTOR_DEPENDENCIES(SmilesBenzimidazoleCount) { return {}; }
DescriptorResult SmilesBenzimidazoleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBenzimidazoleCount(c_ctx, get_smiles_func);
}

// --- SmilesBenzothiazoleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBenzothiazoleCount, C_Descriptor, "C implementation of SmilesBenzothiazoleCount")
DESCRIPTOR_DEPENDENCIES(SmilesBenzothiazoleCount) { return {}; }
DescriptorResult SmilesBenzothiazoleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBenzothiazoleCount(c_ctx, get_smiles_func);
}

// --- SmilesBenzoxazoleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBenzoxazoleCount, C_Descriptor, "C implementation of SmilesBenzoxazoleCount")
DESCRIPTOR_DEPENDENCIES(SmilesBenzoxazoleCount) { return {}; }
DescriptorResult SmilesBenzoxazoleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBenzoxazoleCount(c_ctx, get_smiles_func);
}

// --- SmilesBenzylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBenzylCount, C_Descriptor, "C implementation of SmilesBenzylCount")
DESCRIPTOR_DEPENDENCIES(SmilesBenzylCount) { return {}; }
DescriptorResult SmilesBenzylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBenzylCount(c_ctx, get_smiles_func);
}

// --- SmilesBiphenylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBiphenylCount, C_Descriptor, "C implementation of SmilesBiphenylCount")
DESCRIPTOR_DEPENDENCIES(SmilesBiphenylCount) { return {}; }
DescriptorResult SmilesBiphenylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBiphenylCount(c_ctx, get_smiles_func);
}

// --- SmilesBondTypeDiversity Wrapper ---
DECLARE_DESCRIPTOR(SmilesBondTypeDiversity, C_Descriptor, "C implementation of SmilesBondTypeDiversity")
DESCRIPTOR_DEPENDENCIES(SmilesBondTypeDiversity) { return {}; }
DescriptorResult SmilesBondTypeDiversityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBondTypeDiversity(c_ctx, get_smiles_func);
}

// --- SmilesBoronCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBoronCount, C_Descriptor, "C implementation of SmilesBoronCount")
DESCRIPTOR_DEPENDENCIES(SmilesBoronCount) { return {}; }
DescriptorResult SmilesBoronCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBoronCount(c_ctx, get_smiles_func);
}

// --- SmilesBracketAtomCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBracketAtomCount, C_Descriptor, "C implementation of SmilesBracketAtomCount")
DESCRIPTOR_DEPENDENCIES(SmilesBracketAtomCount) { return {}; }
DescriptorResult SmilesBracketAtomCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBracketAtomCount(c_ctx, get_smiles_func);
}

// --- SmilesBranchCloseCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBranchCloseCount, C_Descriptor, "C implementation of SmilesBranchCloseCount")
DESCRIPTOR_DEPENDENCIES(SmilesBranchCloseCount) { return {}; }
DescriptorResult SmilesBranchCloseCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBranchCloseCount(c_ctx, get_smiles_func);
}

// --- SmilesBranchOpenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBranchOpenCount, C_Descriptor, "C implementation of SmilesBranchOpenCount")
DESCRIPTOR_DEPENDENCIES(SmilesBranchOpenCount) { return {}; }
DescriptorResult SmilesBranchOpenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBranchOpenCount(c_ctx, get_smiles_func);
}

// --- SmilesBranchedAmideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBranchedAmideCount, C_Descriptor, "C implementation of SmilesBranchedAmideCount")
DESCRIPTOR_DEPENDENCIES(SmilesBranchedAmideCount) { return {}; }
DescriptorResult SmilesBranchedAmideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBranchedAmideCount(c_ctx, get_smiles_func);
}

// --- SmilesBranchingIndex Wrapper ---
DECLARE_DESCRIPTOR(SmilesBranchingIndex, C_Descriptor, "C implementation of SmilesBranchingIndex")
DESCRIPTOR_DEPENDENCIES(SmilesBranchingIndex) { return {}; }
DescriptorResult SmilesBranchingIndexDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBranchingIndex(c_ctx, get_smiles_func);
}

// --- SmilesBromineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesBromineCount, C_Descriptor, "C implementation of SmilesBromineCount")
DESCRIPTOR_DEPENDENCIES(SmilesBromineCount) { return {}; }
DescriptorResult SmilesBromineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesBromineCount(c_ctx, get_smiles_func);
}

// --- SmilesCarbamatCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbamatCount, C_Descriptor, "C implementation of SmilesCarbamatCount")
DESCRIPTOR_DEPENDENCIES(SmilesCarbamatCount) { return {}; }
DescriptorResult SmilesCarbamatCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbamatCount(c_ctx, get_smiles_func);
}

// --- SmilesCarbohydrateLikeness Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbohydrateLikeness, C_Descriptor, "C implementation of SmilesCarbohydrateLikeness")
DESCRIPTOR_DEPENDENCIES(SmilesCarbohydrateLikeness) { return {}; }
DescriptorResult SmilesCarbohydrateLikenessDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbohydrateLikeness(c_ctx, get_smiles_func);
}

// --- SmilesCarbonAromaticityFraction Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbonAromaticityFraction, C_Descriptor, "C implementation of SmilesCarbonAromaticityFraction")
DESCRIPTOR_DEPENDENCIES(SmilesCarbonAromaticityFraction) { return {}; }
DescriptorResult SmilesCarbonAromaticityFractionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbonAromaticityFraction(c_ctx, get_smiles_func);
}

// --- SmilesCarbonCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbonCount, C_Descriptor, "C implementation of SmilesCarbonCount")
DESCRIPTOR_DEPENDENCIES(SmilesCarbonCount) { return {}; }
DescriptorResult SmilesCarbonCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbonCount(c_ctx, get_smiles_func);
}

// --- SmilesCarbonPhosphorusBondCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbonPhosphorusBondCount, C_Descriptor, "C implementation of SmilesCarbonPhosphorusBondCount")
DESCRIPTOR_DEPENDENCIES(SmilesCarbonPhosphorusBondCount) { return {}; }
DescriptorResult SmilesCarbonPhosphorusBondCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbonPhosphorusBondCount(c_ctx, get_smiles_func);
}

// --- SmilesCarbonylDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbonylDistribution, C_Descriptor, "C implementation of SmilesCarbonylDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesCarbonylDistribution) { return {}; }
DescriptorResult SmilesCarbonylDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbonylDistribution(c_ctx, get_smiles_func);
}

// --- SmilesCarbonylHeteroatomCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarbonylHeteroatomCount, C_Descriptor, "C implementation of SmilesCarbonylHeteroatomCount")
DESCRIPTOR_DEPENDENCIES(SmilesCarbonylHeteroatomCount) { return {}; }
DescriptorResult SmilesCarbonylHeteroatomCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarbonylHeteroatomCount(c_ctx, get_smiles_func);
}

// --- SmilesCarboxylateCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCarboxylateCount, C_Descriptor, "C implementation of SmilesCarboxylateCount")
DESCRIPTOR_DEPENDENCIES(SmilesCarboxylateCount) { return {}; }
DescriptorResult SmilesCarboxylateCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCarboxylateCount(c_ctx, get_smiles_func);
}

// --- SmilesChainLengthDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesChainLengthDistribution, C_Descriptor, "C implementation of SmilesChainLengthDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesChainLengthDistribution) { return {}; }
DescriptorResult SmilesChainLengthDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesChainLengthDistribution(c_ctx, get_smiles_func);
}

// --- SmilesChiralCenterCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesChiralCenterCount, C_Descriptor, "C implementation of SmilesChiralCenterCount")
DESCRIPTOR_DEPENDENCIES(SmilesChiralCenterCount) { return {}; }
DescriptorResult SmilesChiralCenterCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesChiralCenterCount(c_ctx, get_smiles_func);
}

// --- SmilesChiralCenterDensity Wrapper ---
DECLARE_DESCRIPTOR(SmilesChiralCenterDensity, C_Descriptor, "C implementation of SmilesChiralCenterDensity")
DESCRIPTOR_DEPENDENCIES(SmilesChiralCenterDensity) { return {}; }
DescriptorResult SmilesChiralCenterDensityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesChiralCenterDensity(c_ctx, get_smiles_func);
}

// --- SmilesChiralityDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesChiralityDistribution, C_Descriptor, "C implementation of SmilesChiralityDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesChiralityDistribution) { return {}; }
DescriptorResult SmilesChiralityDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesChiralityDistribution(c_ctx, get_smiles_func);
}

// --- SmilesChlorineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesChlorineCount, C_Descriptor, "C implementation of SmilesChlorineCount")
DESCRIPTOR_DEPENDENCIES(SmilesChlorineCount) { return {}; }
DescriptorResult SmilesChlorineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesChlorineCount(c_ctx, get_smiles_func);
}

// --- SmilesComplexRingClosureCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesComplexRingClosureCount, C_Descriptor, "C implementation of SmilesComplexRingClosureCount")
DESCRIPTOR_DEPENDENCIES(SmilesComplexRingClosureCount) { return {}; }
DescriptorResult SmilesComplexRingClosureCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesComplexRingClosureCount(c_ctx, get_smiles_func);
}

// --- SmilesConjugatedSystemCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesConjugatedSystemCount, C_Descriptor, "C implementation of SmilesConjugatedSystemCount")
DESCRIPTOR_DEPENDENCIES(SmilesConjugatedSystemCount) { return {}; }
DescriptorResult SmilesConjugatedSystemCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesConjugatedSystemCount(c_ctx, get_smiles_func);
}

// --- SmilesCyclobutylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCyclobutylCount, C_Descriptor, "C implementation of SmilesCyclobutylCount")
DESCRIPTOR_DEPENDENCIES(SmilesCyclobutylCount) { return {}; }
DescriptorResult SmilesCyclobutylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCyclobutylCount(c_ctx, get_smiles_func);
}

// --- SmilesCyclohexylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCyclohexylCount, C_Descriptor, "C implementation of SmilesCyclohexylCount")
DESCRIPTOR_DEPENDENCIES(SmilesCyclohexylCount) { return {}; }
DescriptorResult SmilesCyclohexylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCyclohexylCount(c_ctx, get_smiles_func);
}

// --- SmilesCyclopentylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCyclopentylCount, C_Descriptor, "C implementation of SmilesCyclopentylCount")
DESCRIPTOR_DEPENDENCIES(SmilesCyclopentylCount) { return {}; }
DescriptorResult SmilesCyclopentylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCyclopentylCount(c_ctx, get_smiles_func);
}

// --- SmilesCyclopropylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesCyclopropylCount, C_Descriptor, "C implementation of SmilesCyclopropylCount")
DESCRIPTOR_DEPENDENCIES(SmilesCyclopropylCount) { return {}; }
DescriptorResult SmilesCyclopropylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesCyclopropylCount(c_ctx, get_smiles_func);
}

// --- SmilesDiazoCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDiazoCount, C_Descriptor, "C implementation of SmilesDiazoCount")
DESCRIPTOR_DEPENDENCIES(SmilesDiazoCount) { return {}; }
DescriptorResult SmilesDiazoCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDiazoCount(c_ctx, get_smiles_func);
}

// --- SmilesDimethylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDimethylCount, C_Descriptor, "C implementation of SmilesDimethylCount")
DESCRIPTOR_DEPENDENCIES(SmilesDimethylCount) { return {}; }
DescriptorResult SmilesDimethylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDimethylCount(c_ctx, get_smiles_func);
}

// --- SmilesDisulfideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDisulfideCount, C_Descriptor, "C implementation of SmilesDisulfideCount")
DESCRIPTOR_DEPENDENCIES(SmilesDisulfideCount) { return {}; }
DescriptorResult SmilesDisulfideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDisulfideCount(c_ctx, get_smiles_func);
}

// --- SmilesDotCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDotCount, C_Descriptor, "C implementation of SmilesDotCount")
DESCRIPTOR_DEPENDENCIES(SmilesDotCount) { return {}; }
DescriptorResult SmilesDotCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDotCount(c_ctx, get_smiles_func);
}

// --- SmilesDoubleBondCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDoubleBondCount, C_Descriptor, "C implementation of SmilesDoubleBondCount")
DESCRIPTOR_DEPENDENCIES(SmilesDoubleBondCount) { return {}; }
DescriptorResult SmilesDoubleBondCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDoubleBondCount(c_ctx, get_smiles_func);
}

// --- SmilesDoubleBondRingJunctionCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesDoubleBondRingJunctionCount, C_Descriptor, "C implementation of SmilesDoubleBondRingJunctionCount")
DESCRIPTOR_DEPENDENCIES(SmilesDoubleBondRingJunctionCount) { return {}; }
DescriptorResult SmilesDoubleBondRingJunctionCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesDoubleBondRingJunctionCount(c_ctx, get_smiles_func);
}

// --- SmilesEsterCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesEsterCount, C_Descriptor, "C implementation of SmilesEsterCount")
DESCRIPTOR_DEPENDENCIES(SmilesEsterCount) { return {}; }
DescriptorResult SmilesEsterCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesEsterCount(c_ctx, get_smiles_func);
}

// --- SmilesEtherCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesEtherCount, C_Descriptor, "C implementation of SmilesEtherCount")
DESCRIPTOR_DEPENDENCIES(SmilesEtherCount) { return {}; }
DescriptorResult SmilesEtherCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesEtherCount(c_ctx, get_smiles_func);
}

// --- SmilesFluorinatedFragmentCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesFluorinatedFragmentCount, C_Descriptor, "C implementation of SmilesFluorinatedFragmentCount")
DESCRIPTOR_DEPENDENCIES(SmilesFluorinatedFragmentCount) { return {}; }
DescriptorResult SmilesFluorinatedFragmentCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFluorinatedFragmentCount(c_ctx, get_smiles_func);
}

// --- SmilesFluorineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesFluorineCount, C_Descriptor, "C implementation of SmilesFluorineCount")
DESCRIPTOR_DEPENDENCIES(SmilesFluorineCount) { return {}; }
DescriptorResult SmilesFluorineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFluorineCount(c_ctx, get_smiles_func);
}

// --- SmilesFluorineToCarbonRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesFluorineToCarbonRatio, C_Descriptor, "C implementation of SmilesFluorineToCarbonRatio")
DESCRIPTOR_DEPENDENCIES(SmilesFluorineToCarbonRatio) { return {}; }
DescriptorResult SmilesFluorineToCarbonRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFluorineToCarbonRatio(c_ctx, get_smiles_func);
}

// --- SmilesFragmentComplexity Wrapper ---
DECLARE_DESCRIPTOR(SmilesFragmentComplexity, C_Descriptor, "C implementation of SmilesFragmentComplexity")
DESCRIPTOR_DEPENDENCIES(SmilesFragmentComplexity) { return {}; }
DescriptorResult SmilesFragmentComplexityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFragmentComplexity(c_ctx, get_smiles_func);
}

// --- SmilesFuranCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesFuranCount, C_Descriptor, "C implementation of SmilesFuranCount")
DESCRIPTOR_DEPENDENCIES(SmilesFuranCount) { return {}; }
DescriptorResult SmilesFuranCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFuranCount(c_ctx, get_smiles_func);
}

// --- SmilesFusedRingCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesFusedRingCount, C_Descriptor, "C implementation of SmilesFusedRingCount")
DESCRIPTOR_DEPENDENCIES(SmilesFusedRingCount) { return {}; }
DescriptorResult SmilesFusedRingCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesFusedRingCount(c_ctx, get_smiles_func);
}

// --- SmilesGeneralAmmoniumCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesGeneralAmmoniumCount, C_Descriptor, "C implementation of SmilesGeneralAmmoniumCount")
DESCRIPTOR_DEPENDENCIES(SmilesGeneralAmmoniumCount) { return {}; }
DescriptorResult SmilesGeneralAmmoniumCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesGeneralAmmoniumCount(c_ctx, get_smiles_func);
}

// --- SmilesGuanidineBasicCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesGuanidineBasicCount, C_Descriptor, "C implementation of SmilesGuanidineBasicCount")
DESCRIPTOR_DEPENDENCIES(SmilesGuanidineBasicCount) { return {}; }
DescriptorResult SmilesGuanidineBasicCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesGuanidineBasicCount(c_ctx, get_smiles_func);
}

// --- SmilesHalogenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesHalogenCount, C_Descriptor, "C implementation of SmilesHalogenCount")
DESCRIPTOR_DEPENDENCIES(SmilesHalogenCount) { return {}; }
DescriptorResult SmilesHalogenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHalogenCount(c_ctx, get_smiles_func);
}

// --- SmilesHeteroatomClustering Wrapper ---
DECLARE_DESCRIPTOR(SmilesHeteroatomClustering, C_Descriptor, "C implementation of SmilesHeteroatomClustering")
DESCRIPTOR_DEPENDENCIES(SmilesHeteroatomClustering) { return {}; }
DescriptorResult SmilesHeteroatomClusteringDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHeteroatomClustering(c_ctx, get_smiles_func);
}

// --- SmilesHeteroatomSequenceCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesHeteroatomSequenceCount, C_Descriptor, "C implementation of SmilesHeteroatomSequenceCount")
DESCRIPTOR_DEPENDENCIES(SmilesHeteroatomSequenceCount) { return {}; }
DescriptorResult SmilesHeteroatomSequenceCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHeteroatomSequenceCount(c_ctx, get_smiles_func);
}

// --- SmilesHeterocycleCountNormalized Wrapper ---
DECLARE_DESCRIPTOR(SmilesHeterocycleCountNormalized, C_Descriptor, "C implementation of SmilesHeterocycleCountNormalized")
DESCRIPTOR_DEPENDENCIES(SmilesHeterocycleCountNormalized) { return {}; }
DescriptorResult SmilesHeterocycleCountNormalizedDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHeterocycleCountNormalized(c_ctx, get_smiles_func);
}

// --- SmilesHydrazideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesHydrazideCount, C_Descriptor, "C implementation of SmilesHydrazideCount")
DESCRIPTOR_DEPENDENCIES(SmilesHydrazideCount) { return {}; }
DescriptorResult SmilesHydrazideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHydrazideCount(c_ctx, get_smiles_func);
}

// --- SmilesHydrazoneCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesHydrazoneCount, C_Descriptor, "C implementation of SmilesHydrazoneCount")
DESCRIPTOR_DEPENDENCIES(SmilesHydrazoneCount) { return {}; }
DescriptorResult SmilesHydrazoneCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHydrazoneCount(c_ctx, get_smiles_func);
}

// --- SmilesHydrophilicGroupDensity Wrapper ---
DECLARE_DESCRIPTOR(SmilesHydrophilicGroupDensity, C_Descriptor, "C implementation of SmilesHydrophilicGroupDensity")
DESCRIPTOR_DEPENDENCIES(SmilesHydrophilicGroupDensity) { return {}; }
DescriptorResult SmilesHydrophilicGroupDensityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesHydrophilicGroupDensity(c_ctx, get_smiles_func);
}

// --- SmilesImidazoleBasicCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesImidazoleBasicCount, C_Descriptor, "C implementation of SmilesImidazoleBasicCount")
DESCRIPTOR_DEPENDENCIES(SmilesImidazoleBasicCount) { return {}; }
DescriptorResult SmilesImidazoleBasicCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesImidazoleBasicCount(c_ctx, get_smiles_func);
}

// --- SmilesImidazoliumCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesImidazoliumCount, C_Descriptor, "C implementation of SmilesImidazoliumCount")
DESCRIPTOR_DEPENDENCIES(SmilesImidazoliumCount) { return {}; }
DescriptorResult SmilesImidazoliumCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesImidazoliumCount(c_ctx, get_smiles_func);
}

// --- SmilesIndoleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIndoleCount, C_Descriptor, "C implementation of SmilesIndoleCount")
DESCRIPTOR_DEPENDENCIES(SmilesIndoleCount) { return {}; }
DescriptorResult SmilesIndoleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIndoleCount(c_ctx, get_smiles_func);
}

// --- SmilesIodineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIodineCount, C_Descriptor, "C implementation of SmilesIodineCount")
DESCRIPTOR_DEPENDENCIES(SmilesIodineCount) { return {}; }
DescriptorResult SmilesIodineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIodineCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableAmineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableAmineCount, C_Descriptor, "C implementation of SmilesIonizableAmineCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableAmineCount) { return {}; }
DescriptorResult SmilesIonizableAmineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableAmineCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableImidazoleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableImidazoleCount, C_Descriptor, "C implementation of SmilesIonizableImidazoleCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableImidazoleCount) { return {}; }
DescriptorResult SmilesIonizableImidazoleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableImidazoleCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableNitrogenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableNitrogenCount, C_Descriptor, "C implementation of SmilesIonizableNitrogenCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableNitrogenCount) { return {}; }
DescriptorResult SmilesIonizableNitrogenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableNitrogenCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableOxygenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableOxygenCount, C_Descriptor, "C implementation of SmilesIonizableOxygenCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableOxygenCount) { return {}; }
DescriptorResult SmilesIonizableOxygenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableOxygenCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizablePhenolCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizablePhenolCount, C_Descriptor, "C implementation of SmilesIonizablePhenolCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizablePhenolCount) { return {}; }
DescriptorResult SmilesIonizablePhenolCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizablePhenolCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizablePhosphorusCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizablePhosphorusCount, C_Descriptor, "C implementation of SmilesIonizablePhosphorusCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizablePhosphorusCount) { return {}; }
DescriptorResult SmilesIonizablePhosphorusCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizablePhosphorusCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizablePyridineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizablePyridineCount, C_Descriptor, "C implementation of SmilesIonizablePyridineCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizablePyridineCount) { return {}; }
DescriptorResult SmilesIonizablePyridineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizablePyridineCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableSulfonamideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableSulfonamideCount, C_Descriptor, "C implementation of SmilesIonizableSulfonamideCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableSulfonamideCount) { return {}; }
DescriptorResult SmilesIonizableSulfonamideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableSulfonamideCount(c_ctx, get_smiles_func);
}

// --- SmilesIonizableSulfurCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIonizableSulfurCount, C_Descriptor, "C implementation of SmilesIonizableSulfurCount")
DESCRIPTOR_DEPENDENCIES(SmilesIonizableSulfurCount) { return {}; }
DescriptorResult SmilesIonizableSulfurCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIonizableSulfurCount(c_ctx, get_smiles_func);
}

// --- SmilesIsocyanateCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIsocyanateCount, C_Descriptor, "C implementation of SmilesIsocyanateCount")
DESCRIPTOR_DEPENDENCIES(SmilesIsocyanateCount) { return {}; }
DescriptorResult SmilesIsocyanateCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIsocyanateCount(c_ctx, get_smiles_func);
}

// --- SmilesIsocyanideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesIsocyanideCount, C_Descriptor, "C implementation of SmilesIsocyanideCount")
DESCRIPTOR_DEPENDENCIES(SmilesIsocyanideCount) { return {}; }
DescriptorResult SmilesIsocyanideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesIsocyanideCount(c_ctx, get_smiles_func);
}

// --- SmilesKetoneCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesKetoneCount, C_Descriptor, "C implementation of SmilesKetoneCount")
DESCRIPTOR_DEPENDENCIES(SmilesKetoneCount) { return {}; }
DescriptorResult SmilesKetoneCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesKetoneCount(c_ctx, get_smiles_func);
}

// --- SmilesMethylationDegree Wrapper ---
DECLARE_DESCRIPTOR(SmilesMethylationDegree, C_Descriptor, "C implementation of SmilesMethylationDegree")
DESCRIPTOR_DEPENDENCIES(SmilesMethylationDegree) { return {}; }
DescriptorResult SmilesMethylationDegreeDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesMethylationDegree(c_ctx, get_smiles_func);
}

// --- SmilesMorpholineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesMorpholineCount, C_Descriptor, "C implementation of SmilesMorpholineCount")
DESCRIPTOR_DEPENDENCIES(SmilesMorpholineCount) { return {}; }
DescriptorResult SmilesMorpholineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesMorpholineCount(c_ctx, get_smiles_func);
}

// --- SmilesNAlkylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNAlkylCount, C_Descriptor, "C implementation of SmilesNAlkylCount")
DESCRIPTOR_DEPENDENCIES(SmilesNAlkylCount) { return {}; }
DescriptorResult SmilesNAlkylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNAlkylCount(c_ctx, get_smiles_func);
}

// --- SmilesNaphthaleneCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNaphthaleneCount, C_Descriptor, "C implementation of SmilesNaphthaleneCount")
DESCRIPTOR_DEPENDENCIES(SmilesNaphthaleneCount) { return {}; }
DescriptorResult SmilesNaphthaleneCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNaphthaleneCount(c_ctx, get_smiles_func);
}

// --- SmilesNegativeChargeCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNegativeChargeCount, C_Descriptor, "C implementation of SmilesNegativeChargeCount")
DESCRIPTOR_DEPENDENCIES(SmilesNegativeChargeCount) { return {}; }
DescriptorResult SmilesNegativeChargeCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNegativeChargeCount(c_ctx, get_smiles_func);
}

// --- SmilesNitrileCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrileCount, C_Descriptor, "C implementation of SmilesNitrileCount")
DESCRIPTOR_DEPENDENCIES(SmilesNitrileCount) { return {}; }
DescriptorResult SmilesNitrileCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrileCount(c_ctx, get_smiles_func);
}

// --- SmilesNitroCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitroCount, C_Descriptor, "C implementation of SmilesNitroCount")
DESCRIPTOR_DEPENDENCIES(SmilesNitroCount) { return {}; }
DescriptorResult SmilesNitroCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitroCount(c_ctx, get_smiles_func);
}

// --- SmilesNitrogenAromaticityFraction Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrogenAromaticityFraction, C_Descriptor, "C implementation of SmilesNitrogenAromaticityFraction")
DESCRIPTOR_DEPENDENCIES(SmilesNitrogenAromaticityFraction) { return {}; }
DescriptorResult SmilesNitrogenAromaticityFractionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrogenAromaticityFraction(c_ctx, get_smiles_func);
}

// --- SmilesNitrogenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrogenCount, C_Descriptor, "C implementation of SmilesNitrogenCount")
DESCRIPTOR_DEPENDENCIES(SmilesNitrogenCount) { return {}; }
DescriptorResult SmilesNitrogenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrogenCount(c_ctx, get_smiles_func);
}

// --- SmilesNitrogenEnvironmentDiversity Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrogenEnvironmentDiversity, C_Descriptor, "C implementation of SmilesNitrogenEnvironmentDiversity")
DESCRIPTOR_DEPENDENCIES(SmilesNitrogenEnvironmentDiversity) { return {}; }
DescriptorResult SmilesNitrogenEnvironmentDiversityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrogenEnvironmentDiversity(c_ctx, get_smiles_func);
}

// --- SmilesNitrogenOxidationStateDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrogenOxidationStateDistribution, C_Descriptor, "C implementation of SmilesNitrogenOxidationStateDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesNitrogenOxidationStateDistribution) { return {}; }
DescriptorResult SmilesNitrogenOxidationStateDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrogenOxidationStateDistribution(c_ctx, get_smiles_func);
}

// --- SmilesNitrogenPositionVariance Wrapper ---
DECLARE_DESCRIPTOR(SmilesNitrogenPositionVariance, C_Descriptor, "C implementation of SmilesNitrogenPositionVariance")
DESCRIPTOR_DEPENDENCIES(SmilesNitrogenPositionVariance) { return {}; }
DescriptorResult SmilesNitrogenPositionVarianceDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNitrogenPositionVariance(c_ctx, get_smiles_func);
}

// --- SmilesNonCarbonBackboneRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesNonCarbonBackboneRatio, C_Descriptor, "C implementation of SmilesNonCarbonBackboneRatio")
DESCRIPTOR_DEPENDENCIES(SmilesNonCarbonBackboneRatio) { return {}; }
DescriptorResult SmilesNonCarbonBackboneRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesNonCarbonBackboneRatio(c_ctx, get_smiles_func);
}

// --- SmilesOximeCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesOximeCount, C_Descriptor, "C implementation of SmilesOximeCount")
DESCRIPTOR_DEPENDENCIES(SmilesOximeCount) { return {}; }
DescriptorResult SmilesOximeCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesOximeCount(c_ctx, get_smiles_func);
}

// --- SmilesOxygenClusteringFactor Wrapper ---
DECLARE_DESCRIPTOR(SmilesOxygenClusteringFactor, C_Descriptor, "C implementation of SmilesOxygenClusteringFactor")
DESCRIPTOR_DEPENDENCIES(SmilesOxygenClusteringFactor) { return {}; }
DescriptorResult SmilesOxygenClusteringFactorDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesOxygenClusteringFactor(c_ctx, get_smiles_func);
}

// --- SmilesOxygenCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesOxygenCount, C_Descriptor, "C implementation of SmilesOxygenCount")
DESCRIPTOR_DEPENDENCIES(SmilesOxygenCount) { return {}; }
DescriptorResult SmilesOxygenCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesOxygenCount(c_ctx, get_smiles_func);
}

// --- SmilesPhenolCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhenolCount, C_Descriptor, "C implementation of SmilesPhenolCount")
DESCRIPTOR_DEPENDENCIES(SmilesPhenolCount) { return {}; }
DescriptorResult SmilesPhenolCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhenolCount(c_ctx, get_smiles_func);
}

// --- SmilesPhenylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhenylCount, C_Descriptor, "C implementation of SmilesPhenylCount")
DESCRIPTOR_DEPENDENCIES(SmilesPhenylCount) { return {}; }
DescriptorResult SmilesPhenylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhenylCount(c_ctx, get_smiles_func);
}

// --- SmilesPhosphateAnionCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhosphateAnionCount, C_Descriptor, "C implementation of SmilesPhosphateAnionCount")
DESCRIPTOR_DEPENDENCIES(SmilesPhosphateAnionCount) { return {}; }
DescriptorResult SmilesPhosphateAnionCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhosphateAnionCount(c_ctx, get_smiles_func);
}

// --- SmilesPhosphateCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhosphateCount, C_Descriptor, "C implementation of SmilesPhosphateCount")
DESCRIPTOR_DEPENDENCIES(SmilesPhosphateCount) { return {}; }
DescriptorResult SmilesPhosphateCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhosphateCount(c_ctx, get_smiles_func);
}

// --- SmilesPhosphorusCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhosphorusCount, C_Descriptor, "C implementation of SmilesPhosphorusCount")
DESCRIPTOR_DEPENDENCIES(SmilesPhosphorusCount) { return {}; }
DescriptorResult SmilesPhosphorusCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhosphorusCount(c_ctx, get_smiles_func);
}

// --- SmilesPhosphorusOxidationStateDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesPhosphorusOxidationStateDistribution, C_Descriptor, "C implementation of SmilesPhosphorusOxidationStateDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesPhosphorusOxidationStateDistribution) { return {}; }
DescriptorResult SmilesPhosphorusOxidationStateDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPhosphorusOxidationStateDistribution(c_ctx, get_smiles_func);
}

// --- SmilesPiperazineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPiperazineCount, C_Descriptor, "C implementation of SmilesPiperazineCount")
DESCRIPTOR_DEPENDENCIES(SmilesPiperazineCount) { return {}; }
DescriptorResult SmilesPiperazineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPiperazineCount(c_ctx, get_smiles_func);
}

// --- SmilesPiperidineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPiperidineCount, C_Descriptor, "C implementation of SmilesPiperidineCount")
DESCRIPTOR_DEPENDENCIES(SmilesPiperidineCount) { return {}; }
DescriptorResult SmilesPiperidineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPiperidineCount(c_ctx, get_smiles_func);
}

// --- SmilesPositionWeightedHeteroRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesPositionWeightedHeteroRatio, C_Descriptor, "C implementation of SmilesPositionWeightedHeteroRatio")
DESCRIPTOR_DEPENDENCIES(SmilesPositionWeightedHeteroRatio) { return {}; }
DescriptorResult SmilesPositionWeightedHeteroRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPositionWeightedHeteroRatio(c_ctx, get_smiles_func);
}

// --- SmilesPositiveChargeCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPositiveChargeCount, C_Descriptor, "C implementation of SmilesPositiveChargeCount")
DESCRIPTOR_DEPENDENCIES(SmilesPositiveChargeCount) { return {}; }
DescriptorResult SmilesPositiveChargeCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPositiveChargeCount(c_ctx, get_smiles_func);
}

// --- SmilesPrimaryAmineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPrimaryAmineCount, C_Descriptor, "C implementation of SmilesPrimaryAmineCount")
DESCRIPTOR_DEPENDENCIES(SmilesPrimaryAmineCount) { return {}; }
DescriptorResult SmilesPrimaryAmineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPrimaryAmineCount(c_ctx, get_smiles_func);
}

// --- SmilesPrimaryAmineRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesPrimaryAmineRatio, C_Descriptor, "C implementation of SmilesPrimaryAmineRatio")
DESCRIPTOR_DEPENDENCIES(SmilesPrimaryAmineRatio) { return {}; }
DescriptorResult SmilesPrimaryAmineRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPrimaryAmineRatio(c_ctx, get_smiles_func);
}

// --- SmilesPyridineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPyridineCount, C_Descriptor, "C implementation of SmilesPyridineCount")
DESCRIPTOR_DEPENDENCIES(SmilesPyridineCount) { return {}; }
DescriptorResult SmilesPyridineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPyridineCount(c_ctx, get_smiles_func);
}

// --- SmilesPyridiniumCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPyridiniumCount, C_Descriptor, "C implementation of SmilesPyridiniumCount")
DESCRIPTOR_DEPENDENCIES(SmilesPyridiniumCount) { return {}; }
DescriptorResult SmilesPyridiniumCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPyridiniumCount(c_ctx, get_smiles_func);
}

// --- SmilesPyrimidineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPyrimidineCount, C_Descriptor, "C implementation of SmilesPyrimidineCount")
DESCRIPTOR_DEPENDENCIES(SmilesPyrimidineCount) { return {}; }
DescriptorResult SmilesPyrimidineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPyrimidineCount(c_ctx, get_smiles_func);
}

// --- SmilesPyrroleCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesPyrroleCount, C_Descriptor, "C implementation of SmilesPyrroleCount")
DESCRIPTOR_DEPENDENCIES(SmilesPyrroleCount) { return {}; }
DescriptorResult SmilesPyrroleCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesPyrroleCount(c_ctx, get_smiles_func);
}

// --- SmilesQuaternaryAmmoniumBasicCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesQuaternaryAmmoniumBasicCount, C_Descriptor, "C implementation of SmilesQuaternaryAmmoniumBasicCount")
DESCRIPTOR_DEPENDENCIES(SmilesQuaternaryAmmoniumBasicCount) { return {}; }
DescriptorResult SmilesQuaternaryAmmoniumBasicCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesQuaternaryAmmoniumBasicCount(c_ctx, get_smiles_func);
}

// --- SmilesRingBridgeCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesRingBridgeCount, C_Descriptor, "C implementation of SmilesRingBridgeCount")
DESCRIPTOR_DEPENDENCIES(SmilesRingBridgeCount) { return {}; }
DescriptorResult SmilesRingBridgeCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesRingBridgeCount(c_ctx, get_smiles_func);
}

// --- SmilesRingClosureCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesRingClosureCount, C_Descriptor, "C implementation of SmilesRingClosureCount")
DESCRIPTOR_DEPENDENCIES(SmilesRingClosureCount) { return {}; }
DescriptorResult SmilesRingClosureCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesRingClosureCount(c_ctx, get_smiles_func);
}

// --- SmilesRingJunctionDensity Wrapper ---
DECLARE_DESCRIPTOR(SmilesRingJunctionDensity, C_Descriptor, "C implementation of SmilesRingJunctionDensity")
DESCRIPTOR_DEPENDENCIES(SmilesRingJunctionDensity) { return {}; }
DescriptorResult SmilesRingJunctionDensityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesRingJunctionDensity(c_ctx, get_smiles_func);
}

// --- SmilesSecondaryAmineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSecondaryAmineCount, C_Descriptor, "C implementation of SmilesSecondaryAmineCount")
DESCRIPTOR_DEPENDENCIES(SmilesSecondaryAmineCount) { return {}; }
DescriptorResult SmilesSecondaryAmineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSecondaryAmineCount(c_ctx, get_smiles_func);
}

// --- SmilesSingleBondCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSingleBondCount, C_Descriptor, "C implementation of SmilesSingleBondCount")
DESCRIPTOR_DEPENDENCIES(SmilesSingleBondCount) { return {}; }
DescriptorResult SmilesSingleBondCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSingleBondCount(c_ctx, get_smiles_func);
}

// --- SmilesSpiroCompoundCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSpiroCompoundCount, C_Descriptor, "C implementation of SmilesSpiroCompoundCount")
DESCRIPTOR_DEPENDENCIES(SmilesSpiroCompoundCount) { return {}; }
DescriptorResult SmilesSpiroCompoundCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSpiroCompoundCount(c_ctx, get_smiles_func);
}

// --- SmilesStereoBackwardCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesStereoBackwardCount, C_Descriptor, "C implementation of SmilesStereoBackwardCount")
DESCRIPTOR_DEPENDENCIES(SmilesStereoBackwardCount) { return {}; }
DescriptorResult SmilesStereoBackwardCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesStereoBackwardCount(c_ctx, get_smiles_func);
}

// --- SmilesStereoForwardCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesStereoForwardCount, C_Descriptor, "C implementation of SmilesStereoForwardCount")
DESCRIPTOR_DEPENDENCIES(SmilesStereoForwardCount) { return {}; }
DescriptorResult SmilesStereoForwardCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesStereoForwardCount(c_ctx, get_smiles_func);
}

// --- SmilesStructuralSymmetry Wrapper ---
DECLARE_DESCRIPTOR(SmilesStructuralSymmetry, C_Descriptor, "C implementation of SmilesStructuralSymmetry")
DESCRIPTOR_DEPENDENCIES(SmilesStructuralSymmetry) { return {}; }
DescriptorResult SmilesStructuralSymmetryDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesStructuralSymmetry(c_ctx, get_smiles_func);
}

// --- SmilesSulfonamideCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSulfonamideCount, C_Descriptor, "C implementation of SmilesSulfonamideCount")
DESCRIPTOR_DEPENDENCIES(SmilesSulfonamideCount) { return {}; }
DescriptorResult SmilesSulfonamideCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSulfonamideCount(c_ctx, get_smiles_func);
}

// --- SmilesSulfonateCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSulfonateCount, C_Descriptor, "C implementation of SmilesSulfonateCount")
DESCRIPTOR_DEPENDENCIES(SmilesSulfonateCount) { return {}; }
DescriptorResult SmilesSulfonateCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSulfonateCount(c_ctx, get_smiles_func);
}

// --- SmilesSulfonicAcidCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSulfonicAcidCount, C_Descriptor, "C implementation of SmilesSulfonicAcidCount")
DESCRIPTOR_DEPENDENCIES(SmilesSulfonicAcidCount) { return {}; }
DescriptorResult SmilesSulfonicAcidCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSulfonicAcidCount(c_ctx, get_smiles_func);
}

// --- SmilesSulfurCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesSulfurCount, C_Descriptor, "C implementation of SmilesSulfurCount")
DESCRIPTOR_DEPENDENCIES(SmilesSulfurCount) { return {}; }
DescriptorResult SmilesSulfurCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSulfurCount(c_ctx, get_smiles_func);
}

// --- SmilesSulfurOxidationStateDistribution Wrapper ---
DECLARE_DESCRIPTOR(SmilesSulfurOxidationStateDistribution, C_Descriptor, "C implementation of SmilesSulfurOxidationStateDistribution")
DESCRIPTOR_DEPENDENCIES(SmilesSulfurOxidationStateDistribution) { return {}; }
DescriptorResult SmilesSulfurOxidationStateDistributionDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesSulfurOxidationStateDistribution(c_ctx, get_smiles_func);
}

// --- SmilesTerminalGroupDiversity Wrapper ---
DECLARE_DESCRIPTOR(SmilesTerminalGroupDiversity, C_Descriptor, "C implementation of SmilesTerminalGroupDiversity")
DESCRIPTOR_DEPENDENCIES(SmilesTerminalGroupDiversity) { return {}; }
DescriptorResult SmilesTerminalGroupDiversityDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTerminalGroupDiversity(c_ctx, get_smiles_func);
}

// --- SmilesTertiaryAmineBasicCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesTertiaryAmineBasicCount, C_Descriptor, "C implementation of SmilesTertiaryAmineBasicCount")
DESCRIPTOR_DEPENDENCIES(SmilesTertiaryAmineBasicCount) { return {}; }
DescriptorResult SmilesTertiaryAmineBasicCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTertiaryAmineBasicCount(c_ctx, get_smiles_func);
}

// --- SmilesTertiaryCarbonCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesTertiaryCarbonCount, C_Descriptor, "C implementation of SmilesTertiaryCarbonCount")
DESCRIPTOR_DEPENDENCIES(SmilesTertiaryCarbonCount) { return {}; }
DescriptorResult SmilesTertiaryCarbonCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTertiaryCarbonCount(c_ctx, get_smiles_func);
}

// --- SmilesThiocyanateCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThiocyanateCount, C_Descriptor, "C implementation of SmilesThiocyanateCount")
DESCRIPTOR_DEPENDENCIES(SmilesThiocyanateCount) { return {}; }
DescriptorResult SmilesThiocyanateCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThiocyanateCount(c_ctx, get_smiles_func);
}

// --- SmilesThioetherCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThioetherCount, C_Descriptor, "C implementation of SmilesThioetherCount")
DESCRIPTOR_DEPENDENCIES(SmilesThioetherCount) { return {}; }
DescriptorResult SmilesThioetherCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThioetherCount(c_ctx, get_smiles_func);
}

// --- SmilesThiolCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThiolCount, C_Descriptor, "C implementation of SmilesThiolCount")
DESCRIPTOR_DEPENDENCIES(SmilesThiolCount) { return {}; }
DescriptorResult SmilesThiolCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThiolCount(c_ctx, get_smiles_func);
}

// --- SmilesThiomorpholineCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThiomorpholineCount, C_Descriptor, "C implementation of SmilesThiomorpholineCount")
DESCRIPTOR_DEPENDENCIES(SmilesThiomorpholineCount) { return {}; }
DescriptorResult SmilesThiomorpholineCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThiomorpholineCount(c_ctx, get_smiles_func);
}

// --- SmilesThiopheneCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThiopheneCount, C_Descriptor, "C implementation of SmilesThiopheneCount")
DESCRIPTOR_DEPENDENCIES(SmilesThiopheneCount) { return {}; }
DescriptorResult SmilesThiopheneCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThiopheneCount(c_ctx, get_smiles_func);
}

// --- SmilesThioureaCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesThioureaCount, C_Descriptor, "C implementation of SmilesThioureaCount")
DESCRIPTOR_DEPENDENCIES(SmilesThioureaCount) { return {}; }
DescriptorResult SmilesThioureaCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesThioureaCount(c_ctx, get_smiles_func);
}

// --- SmilesTrifluoromethylCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesTrifluoromethylCount, C_Descriptor, "C implementation of SmilesTrifluoromethylCount")
DESCRIPTOR_DEPENDENCIES(SmilesTrifluoromethylCount) { return {}; }
DescriptorResult SmilesTrifluoromethylCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTrifluoromethylCount(c_ctx, get_smiles_func);
}

// --- SmilesTrifunctionalCarbonRatio Wrapper ---
DECLARE_DESCRIPTOR(SmilesTrifunctionalCarbonRatio, C_Descriptor, "C implementation of SmilesTrifunctionalCarbonRatio")
DESCRIPTOR_DEPENDENCIES(SmilesTrifunctionalCarbonRatio) { return {}; }
DescriptorResult SmilesTrifunctionalCarbonRatioDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTrifunctionalCarbonRatio(c_ctx, get_smiles_func);
}

// --- SmilesTripleBondCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesTripleBondCount, C_Descriptor, "C implementation of SmilesTripleBondCount")
DESCRIPTOR_DEPENDENCIES(SmilesTripleBondCount) { return {}; }
DescriptorResult SmilesTripleBondCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesTripleBondCount(c_ctx, get_smiles_func);
}

// --- SmilesUreaCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesUreaCount, C_Descriptor, "C implementation of SmilesUreaCount")
DESCRIPTOR_DEPENDENCIES(SmilesUreaCount) { return {}; }
DescriptorResult SmilesUreaCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesUreaCount(c_ctx, get_smiles_func);
}

// --- SmilesZwitterionCount Wrapper ---
DECLARE_DESCRIPTOR(SmilesZwitterionCount, C_Descriptor, "C implementation of SmilesZwitterionCount")
DESCRIPTOR_DEPENDENCIES(SmilesZwitterionCount) { return {}; }
DescriptorResult SmilesZwitterionCountDescriptor::calculate(Context& context) const {
    // Double cast to bypass type system - first to void*, then to the C type
    void* v_ptr = &context;
    const void* c_ctx = static_cast<const void*>(v_ptr);
    // Explicitly cast the function pointer to the expected type
    GetSmilesFunc get_smiles_func = reinterpret_cast<GetSmilesFunc>(getSmilesCFunc);
    return calculateSmilesZwitterionCount(c_ctx, get_smiles_func);
}

void register_SmilesAdjacentHeteroatomRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesAdjacentHeteroatomRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAlcoholCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAlcoholCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAldehydeCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAldehydeCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAliphaticChainCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAliphaticChainCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAlkyneCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAlkyneCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAlternatingElementPatternDescriptor() {
    auto descriptor = std::make_shared<SmilesAlternatingElementPatternDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAmideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAmideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAmideToNitrogenRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesAmideToNitrogenRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAnhydrideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAnhydrideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticBondCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticBondCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticCarbonCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticCarbonCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticCarbonHeteroatomCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticCarbonHeteroatomCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticHalogenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticHalogenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticNitrogenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticNitrogenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticOxygenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticOxygenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticRingEdgeDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticRingEdgeDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAromaticSulfurCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAromaticSulfurCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAtomicEntropyDescriptor() {
    auto descriptor = std::make_shared<SmilesAtomicEntropyDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesAzideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesAzideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBenzimidazoleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBenzimidazoleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBenzothiazoleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBenzothiazoleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBenzoxazoleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBenzoxazoleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBenzylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBenzylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBiphenylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBiphenylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBondTypeDiversityDescriptor() {
    auto descriptor = std::make_shared<SmilesBondTypeDiversityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBoronCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBoronCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBracketAtomCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBracketAtomCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBranchCloseCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBranchCloseCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBranchOpenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBranchOpenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBranchedAmideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBranchedAmideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBranchingIndexDescriptor() {
    auto descriptor = std::make_shared<SmilesBranchingIndexDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesBromineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesBromineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbamatCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbamatCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbohydrateLikenessDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbohydrateLikenessDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbonAromaticityFractionDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbonAromaticityFractionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbonCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbonCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbonPhosphorusBondCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbonPhosphorusBondCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbonylDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbonylDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarbonylHeteroatomCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCarbonylHeteroatomCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCarboxylateCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCarboxylateCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesChainLengthDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesChainLengthDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesChiralCenterCountDescriptor() {
    auto descriptor = std::make_shared<SmilesChiralCenterCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesChiralCenterDensityDescriptor() {
    auto descriptor = std::make_shared<SmilesChiralCenterDensityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesChiralityDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesChiralityDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesChlorineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesChlorineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesComplexRingClosureCountDescriptor() {
    auto descriptor = std::make_shared<SmilesComplexRingClosureCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesConjugatedSystemCountDescriptor() {
    auto descriptor = std::make_shared<SmilesConjugatedSystemCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCyclobutylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCyclobutylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCyclohexylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCyclohexylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCyclopentylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCyclopentylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesCyclopropylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesCyclopropylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDiazoCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDiazoCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDimethylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDimethylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDisulfideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDisulfideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDotCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDotCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDoubleBondCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDoubleBondCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesDoubleBondRingJunctionCountDescriptor() {
    auto descriptor = std::make_shared<SmilesDoubleBondRingJunctionCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesEsterCountDescriptor() {
    auto descriptor = std::make_shared<SmilesEsterCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesEtherCountDescriptor() {
    auto descriptor = std::make_shared<SmilesEtherCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFluorinatedFragmentCountDescriptor() {
    auto descriptor = std::make_shared<SmilesFluorinatedFragmentCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFluorineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesFluorineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFluorineToCarbonRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesFluorineToCarbonRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFragmentComplexityDescriptor() {
    auto descriptor = std::make_shared<SmilesFragmentComplexityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFuranCountDescriptor() {
    auto descriptor = std::make_shared<SmilesFuranCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesFusedRingCountDescriptor() {
    auto descriptor = std::make_shared<SmilesFusedRingCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesGeneralAmmoniumCountDescriptor() {
    auto descriptor = std::make_shared<SmilesGeneralAmmoniumCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesGuanidineBasicCountDescriptor() {
    auto descriptor = std::make_shared<SmilesGuanidineBasicCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHalogenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesHalogenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHeteroatomClusteringDescriptor() {
    auto descriptor = std::make_shared<SmilesHeteroatomClusteringDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHeteroatomSequenceCountDescriptor() {
    auto descriptor = std::make_shared<SmilesHeteroatomSequenceCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHeterocycleCountNormalizedDescriptor() {
    auto descriptor = std::make_shared<SmilesHeterocycleCountNormalizedDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHydrazideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesHydrazideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHydrazoneCountDescriptor() {
    auto descriptor = std::make_shared<SmilesHydrazoneCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesHydrophilicGroupDensityDescriptor() {
    auto descriptor = std::make_shared<SmilesHydrophilicGroupDensityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesImidazoleBasicCountDescriptor() {
    auto descriptor = std::make_shared<SmilesImidazoleBasicCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesImidazoliumCountDescriptor() {
    auto descriptor = std::make_shared<SmilesImidazoliumCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIndoleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIndoleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIodineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIodineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableAmineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableAmineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableImidazoleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableImidazoleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableNitrogenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableNitrogenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableOxygenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableOxygenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizablePhenolCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizablePhenolCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizablePhosphorusCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizablePhosphorusCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizablePyridineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizablePyridineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableSulfonamideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableSulfonamideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIonizableSulfurCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIonizableSulfurCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIsocyanateCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIsocyanateCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesIsocyanideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesIsocyanideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesKetoneCountDescriptor() {
    auto descriptor = std::make_shared<SmilesKetoneCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesMethylationDegreeDescriptor() {
    auto descriptor = std::make_shared<SmilesMethylationDegreeDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesMorpholineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesMorpholineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNAlkylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNAlkylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNaphthaleneCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNaphthaleneCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNegativeChargeCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNegativeChargeCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrileCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrileCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitroCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNitroCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrogenAromaticityFractionDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrogenAromaticityFractionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrogenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrogenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrogenEnvironmentDiversityDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrogenEnvironmentDiversityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrogenOxidationStateDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrogenOxidationStateDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNitrogenPositionVarianceDescriptor() {
    auto descriptor = std::make_shared<SmilesNitrogenPositionVarianceDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesNonCarbonBackboneRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesNonCarbonBackboneRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesOximeCountDescriptor() {
    auto descriptor = std::make_shared<SmilesOximeCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesOxygenClusteringFactorDescriptor() {
    auto descriptor = std::make_shared<SmilesOxygenClusteringFactorDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesOxygenCountDescriptor() {
    auto descriptor = std::make_shared<SmilesOxygenCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhenolCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPhenolCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhenylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPhenylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhosphateAnionCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPhosphateAnionCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhosphateCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPhosphateCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhosphorusCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPhosphorusCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPhosphorusOxidationStateDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesPhosphorusOxidationStateDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPiperazineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPiperazineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPiperidineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPiperidineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPositionWeightedHeteroRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesPositionWeightedHeteroRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPositiveChargeCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPositiveChargeCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPrimaryAmineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPrimaryAmineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPrimaryAmineRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesPrimaryAmineRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPyridineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPyridineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPyridiniumCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPyridiniumCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPyrimidineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPyrimidineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesPyrroleCountDescriptor() {
    auto descriptor = std::make_shared<SmilesPyrroleCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesQuaternaryAmmoniumBasicCountDescriptor() {
    auto descriptor = std::make_shared<SmilesQuaternaryAmmoniumBasicCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesRingBridgeCountDescriptor() {
    auto descriptor = std::make_shared<SmilesRingBridgeCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesRingClosureCountDescriptor() {
    auto descriptor = std::make_shared<SmilesRingClosureCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesRingJunctionDensityDescriptor() {
    auto descriptor = std::make_shared<SmilesRingJunctionDensityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSecondaryAmineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSecondaryAmineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSingleBondCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSingleBondCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSpiroCompoundCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSpiroCompoundCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesStereoBackwardCountDescriptor() {
    auto descriptor = std::make_shared<SmilesStereoBackwardCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesStereoForwardCountDescriptor() {
    auto descriptor = std::make_shared<SmilesStereoForwardCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesStructuralSymmetryDescriptor() {
    auto descriptor = std::make_shared<SmilesStructuralSymmetryDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSulfonamideCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSulfonamideCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSulfonateCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSulfonateCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSulfonicAcidCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSulfonicAcidCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSulfurCountDescriptor() {
    auto descriptor = std::make_shared<SmilesSulfurCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesSulfurOxidationStateDistributionDescriptor() {
    auto descriptor = std::make_shared<SmilesSulfurOxidationStateDistributionDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTerminalGroupDiversityDescriptor() {
    auto descriptor = std::make_shared<SmilesTerminalGroupDiversityDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTertiaryAmineBasicCountDescriptor() {
    auto descriptor = std::make_shared<SmilesTertiaryAmineBasicCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTertiaryCarbonCountDescriptor() {
    auto descriptor = std::make_shared<SmilesTertiaryCarbonCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThiocyanateCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThiocyanateCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThioetherCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThioetherCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThiolCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThiolCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThiomorpholineCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThiomorpholineCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThiopheneCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThiopheneCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesThioureaCountDescriptor() {
    auto descriptor = std::make_shared<SmilesThioureaCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTrifluoromethylCountDescriptor() {
    auto descriptor = std::make_shared<SmilesTrifluoromethylCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTrifunctionalCarbonRatioDescriptor() {
    auto descriptor = std::make_shared<SmilesTrifunctionalCarbonRatioDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesTripleBondCountDescriptor() {
    auto descriptor = std::make_shared<SmilesTripleBondCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesUreaCountDescriptor() {
    auto descriptor = std::make_shared<SmilesUreaCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

void register_SmilesZwitterionCountDescriptor() {
    auto descriptor = std::make_shared<SmilesZwitterionCountDescriptor>();
    auto& registry = DescriptorRegistry::getInstance();
    registry.registerDescriptor(descriptor);
}

} // namespace desfact
